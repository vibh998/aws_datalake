import sys
import os
import psycopg2
import json
from datetime import datetime
from ga_process.utils import (
    get_keys_of_bucket,
    error_notify,
    KinesisStreamLogging,
    get_current_date_time_in_millisec,
    KinesisStream,
    get_data_from_dynamodb,
    get_keys_of_bucket,
    error_notify_v2
)
from logging_setup_etl import setup_logging

reload(sys)
sys.setdefaultencoding('utf8')
logger = setup_logging('logging_conf.json')

DATA_SOURCE = 'ad_manager'


def load_ad_unit(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where adunit_id in (select adunit_id from "
                "{0}.stg_tbl_ad_unit group by adunit_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "adunit_id,  "
                "adunit_name,  "
                "adunit_description,  "
                "adunit_code,  "
                "adunit_parent_id,  "
                "explicitly_targeted,  "
                "external_settopbox_channel_id,  "
                "has_children,  "
                "is_fluid,  "
                "is_interstitial,  "
                "is_native,  "
                "is_settopbox_enabled,  "
                "refresh_rate,  "
                "smart_sizemode,  "
                "status,  "
                "target_window,  "
                "adsensesettings_source,  "
                "adsensesettings_adsenseenabled,  "
                "adsensesettings_adtype,  "
                "adsensesettings_backgroundcolor,  "
                "adsensesettings_bordercolor,  "
                "adsensesettings_borderstyle,  "
                "adsensesettings_fontfamily,  "
                "adsensesettings_fontsize,  "
                "adsensesettings_textcolor,  "
                "adsensesettings_titlecolor,  "
                "adsensesettings_urlcolor,  "
                "last_modified_datetime_date_day,  "
                "last_modified_datetime_date_month,  "
                "last_modified_datetime_date_year,  "
                "last_modified_datetime_hour,  "
                "last_modified_datetime_minute,  "
                "last_modified_datetime_second,  "
                "last_modified_datetime_timezoneid,  "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "adunit_id,  "
                "adunit_name,  "
                "adunit_description,  "
                "adunit_code,  "
                "adunit_parent_id,  "
                "explicitly_targeted,  "
                "external_settopbox_channel_id,  "
                "has_children,  "
                "is_fluid,  "
                "is_interstitial,  "
                "is_native,  "
                "is_settopbox_enabled,  "
                "refresh_rate,  "
                "smart_sizemode,  "
                "status,  "
                "target_window,  "
                "adsensesettings_source,  "
                "adsensesettings_adsenseenabled,  "
                "adsensesettings_adtype,  "
                "adsensesettings_backgroundcolor,  "
                "adsensesettings_bordercolor,  "
                "adsensesettings_borderstyle,  "
                "adsensesettings_fontfamily,  "
                "adsensesettings_fontsize,  "
                "adsensesettings_textcolor,  "
                "adsensesettings_titlecolor,  "
                "adsensesettings_urlcolor,  "
                "last_modified_datetime_date_day,  "
                "last_modified_datetime_date_month,  "
                "last_modified_datetime_date_year,  "
                "last_modified_datetime_hour,  "
                "last_modified_datetime_minute,  "
                "last_modified_datetime_second,  "
                "last_modified_datetime_timezoneid,  "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_tbl_ad_unit;".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))

    return cur


def load_advertiser(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where advertiser_id in (select advertiser_id from "
                "{0}.stg_{1} group by advertiser_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "advertiser_id, "
                "advertiser_name, "
                "advertiser_address, "
                "primary_contact_id, "
                "primary_phone, "
                "advertiser_email, "
                "fax_phone, "
                "credit_status, "
                "advertiser_type, "
                "thirdParty_company_id, "
                "external_Id, "
                "viewability_provider, "
                "settings, "
                "comment, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "actv_flg, "
                "generic1, "
                "generic2, "
                "generic3, "
                "generic4, "
                "generic5, "
                "generic6, "
                "generic7, "
                "generic8, "
                "generic9, "
                "generic10, "
                "insrt_ts)  select "
                "advertiser_id, "
                "advertiser_name, "
                "advertiser_address, "
                "primary_contact_id, "
                "primary_phone, "
                "advertiser_email, "
                "fax_phone, "
                "credit_status, "
                "advertiser_type, "
                "thirdParty_company_id, "
                "external_Id, "
                "viewability_provider, "
                "settings, "
                "comment, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))

    return cur


def load_creative(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where creative_id in (select creative_id from "
                "{0}.stg_{1} group by creative_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "creative_id, "
                "advertiser_id, "
                "allow_duration_override, "
                "alt_text, "
                "clicktag_overlay_enabled, "
                "clicktag_required, "
                "click_tracking_url, "
                "create_swiffy_asset, "
                "creative_template_id, "
                "custom_parameters, "
                "destination_url, "
                "destination_url_type, "
                "duration, "
                "fallback_preview_url, "
                "fallback_url, "
                "flash_url, "
                "internal_redirect_url, "
                "is_interstitial, "
                "is_native_eligible, "
                "is_safeframe_compatible, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "locked_orientation, "
                "mezzanine_file, "
                "creative_name, "
                "override_size, "
                "preview_url, "
                "skippable_adtype, "
                "ssl_manual_override, "
                "ssl_scan_result, "
                "thirdparty_impression_url, "
                "unsupported_creative_type, "
                "vast_preview_url, "
                "vast_redirect_type, "
                "vast_xml_url, "
                "actv_flg, "
                "generic1, "
                "generic2, "
                "generic3, "
                "generic4, "
                "generic5, "
                "generic6, "
                "generic7, "
                "generic8, "
                "generic9, "
                "generic10, "
                "insrt_ts)  select "
                "creative_id, "
                "advertiser_id, "
                "allow_duration_override, "
                "alt_text, "
                "clicktag_overlay_enabled, "
                "clicktag_required, "
                "click_tracking_url, "
                "create_swiffy_asset, "
                "creative_template_id, "
                "custom_parameters, "
                "destination_url, "
                "destination_url_type, "
                "duration, "
                "fallback_preview_url, "
                "fallback_url, "
                "flash_url, "
                "internal_redirect_url, "
                "is_interstitial, "
                "is_native_eligible, "
                "is_safeframe_compatible, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "locked_orientation, "
                "mezzanine_file, "
                "creative_name, "
                "override_size, "
                "preview_url, "
                "skippable_adtype, "
                "ssl_manual_override, "
                "ssl_scan_result, "
                "thirdparty_impression_url, "
                "unsupported_creative_type, "
                "vast_preview_url, "
                "vast_redirect_type, "
                "vast_xml_url, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))

    return cur


def load_creative_set(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where creative_set_id in (select creative_set_id from "
                "{0}.stg_{1} group by creative_set_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "creative_set_id, "
                "master_creative_id, "
                "creative_set_name, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "creative_set_id, "
                "master_creative_id, "
                "creative_set_name, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))

    return cur


def load_line_item(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where line_item_id in (select line_item_id from "
                "{0}.stg_{1} group by line_item_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "order_id, "
                "line_item_id, "
                "line_item_name, "
                "external_id, "
                "order_name, "
                "auto_extension_days, "
                "unlimited_end_date_time, "
                "creative_rotation_type, "
                "delivery_rate_type, "
                "roadblocking_type, "
                "line_item_type, "
                "priority, "
                "costperunit_currencycode, "
                "costperunit_microamount, "
                "valuecostperunit_currencycode, "
                "valuecostperunit_microamount, "
                "cost_type, "
                "discount_type, "
                "discount, "
                "contracted_units_bought, "
                "environment_type, "
                "companion_delivery_option, "
                "allow_overbook, "
                "skip_inventorycheck, "
                "skip_crossselling_rule_warningchecks, "
                "reserve_at_creation, "
                "clicks_delivered, "
                "impressions_delivered, "
                "video_completions_delivered, "
                "video_starts_delivered, "
                "viewable_impressions_delivered, "
                "actual_delivery_percentage, "
                "expected_delivery_percentage, "
                "budget_currencycode, "
                "budget_microamount, "
                "status, "
                "reservation_status, "
                "is_archived, "
                "disable_sameadvertiser_competitive_exclusion, "
                "last_modifiedby_app, "
                "is_prioritized_preferreddeals_enabled, "
                "adexchange_auction_openingpriority, "
                "is_settopbox_enabled, "
                "is_missing_creatives, "
                "settopbox_displayinfo, "
                "programmatic_creative_source, "
                "video_maxduration, "
                "primarygoal_goal_type, "
                "primarygoal_unit_type, "
                "primarygoal_units, "
                "grp_settings, "
                "user_consent_eligibility, "
                "notes, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "order_id, "
                "line_item_id, "
                "line_item_name, "
                "external_id, "
                "order_name, "
                "auto_extension_days, "
                "unlimited_end_date_time, "
                "creative_rotation_type, "
                "delivery_rate_type, "
                "roadblocking_type, "
                "line_item_type, "
                "priority, "
                "costperunit_currencycode, "
                "costperunit_microamount, "
                "valuecostperunit_currencycode, "
                "valuecostperunit_microamount, "
                "cost_type, "
                "discount_type, "
                "discount, "
                "contracted_units_bought, "
                "environment_type, "
                "companion_delivery_option, "
                "allow_overbook, "
                "skip_inventorycheck, "
                "skip_crossselling_rule_warningchecks, "
                "reserve_at_creation, "
                "clicks_delivered, "
                "impressions_delivered, "
                "video_completions_delivered, "
                "video_starts_delivered, "
                "viewable_impressions_delivered, "
                "actual_delivery_percentage, "
                "expected_delivery_percentage, "
                "budget_currencycode, "
                "budget_microamount, "
                "status, "
                "reservation_status, "
                "is_archived, "
                "disable_sameadvertiser_competitive_exclusion, "
                "last_modifiedby_app, "
                "is_prioritized_preferreddeals_enabled, "
                "adexchange_auction_openingpriority, "
                "is_settopbox_enabled, "
                "is_missing_creatives, "
                "settopbox_displayinfo, "
                "programmatic_creative_source, "
                "video_maxduration, "
                "primarygoal_goal_type, "
                "primarygoal_unit_type, "
                "primarygoal_units, "
                "grp_settings, "
                "user_consent_eligibility, "
                "notes, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))

    return cur


def load_proposal_line_item(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute(
        "update {0}.{1} set actv_flg = 'N', record_to "
        "= sysdate where proposal_lineitem_id in (select proposal_lineitem_id from "
        "{0}.stg_{1} group by proposal_lineitem_id) and actv_flg = "
        "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "proposal_lineitem_id, "
                "proposal_id, "
                "package_id, "
                "ratecard_id, "
                "product_id, "
                "proposal_lineitem_name, "
                "timezone_id, "
                "internal_notes, "
                "cost_adjustment, "
                "is_archived, "
                "goal_type, "
                "goal_unit_type, "
                "goal_units, "
                "contracted_quantity_buffer, "
                "scheduled_quantity, "
                "contracted_units_bought, "
                "delivery_rate_type, "
                "roadblocking_type, "
                "companion_delivery_option, "
                "creative_rotation_type, "
                "video_maxduration, "
                "dfp_lineitem_id, "
                "lineitem_type, "
                "lineitem_priority, "
                "rate_type, "
                "disable_sameadvertiser_competitive_exclusion, "
                "product_constraints, "
                "is_sold, "
                "base_rate, "
                "netrate_currencycode, "
                "netrate_microamount, "
                "gross_rate, "
                "gross_cost, "
                "netcost_currencycode, "
                "netcost_microamount, "
                "actual_delivery_percentage, "
                "expected_delivery_percentage, "
                "computed_status, "
                "billing_cap, "
                "billing_schedule, "
                "billing_source, "
                "billing_base, "
                "reservation_status, "
                "last_reservation_datetime_date_day, "
                "last_reservation_datetime_date_month, "
                "last_reservation_datetime_date_year, "
                "last_reservation_datetime_hour, "
                "last_reservation_datetime_minute, "
                "last_reservation_datetime_second, "
                "last_reservation_datetime_timezoneid, "
                "usethirdparty_adserver_fromproposal, "
                "thirdparty_adserver_id, "
                "custom_thirdparty_adservername, "
                "environment_type, "
                "is_programmatic, "
                "link_status, "
                "adexchange_environment, "
                "ratecard_pricing_model, "
                "additional_terms, "
                "programmatic_creative_source, "
                "estimated_minimum_impressions, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "proposal_lineitem_id, "
                "proposal_id, "
                "package_id, "
                "ratecard_id, "
                "product_id, "
                "proposal_lineitem_name, "
                "timezone_id, "
                "internal_notes, "
                "cost_adjustment, "
                "is_archived, "
                "goal_type, "
                "goal_unit_type, "
                "goal_units, "
                "contracted_quantity_buffer, "
                "scheduled_quantity, "
                "contracted_units_bought, "
                "delivery_rate_type, "
                "roadblocking_type, "
                "companion_delivery_option, "
                "creative_rotation_type, "
                "video_maxduration, "
                "dfp_lineitem_id, "
                "lineitem_type, "
                "lineitem_priority, "
                "rate_type, "
                "disable_sameadvertiser_competitive_exclusion, "
                "product_constraints, "
                "is_sold, "
                "base_rate, "
                "netrate_currencycode, "
                "netrate_microamount, "
                "gross_rate, "
                "gross_cost, "
                "netcost_currencycode, "
                "netcost_microamount, "
                "actual_delivery_percentage, "
                "expected_delivery_percentage, "
                "computed_status, "
                "billing_cap, "
                "billing_schedule, "
                "billing_source, "
                "billing_base, "
                "reservation_status, "
                "last_reservation_datetime_date_day, "
                "last_reservation_datetime_date_month, "
                "last_reservation_datetime_date_year, "
                "last_reservation_datetime_hour, "
                "last_reservation_datetime_minute, "
                "last_reservation_datetime_second, "
                "last_reservation_datetime_timezoneid, "
                "usethirdparty_adserver_fromproposal, "
                "thirdparty_adserver_id, "
                "custom_thirdparty_adservername, "
                "environment_type, "
                "is_programmatic, "
                "link_status, "
                "adexchange_environment, "
                "ratecard_pricing_model, "
                "additional_terms, "
                "programmatic_creative_source, "
                "estimated_minimum_impressions, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))
    return cur


def load_order(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where order_id in (select order_id from "
                "{0}.stg_{1} group by order_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "order_id, "
                "order_name, "
                "advertiser_id, "
                "agency_id, "
                "creator_id, "
                "salesperson_id, "
                "external_order_id, "
                "trafficker_id, "
                "po_number, "
                "currency_code, "
                "status, "
                "total_clicks_delivered, "
                "total_impressions_delivered, "
                "total_viewable_impressions_delivered, "
                "is_archived, "
                "is_programmatic, "
                "last_modifiedby_App, "
                "unlimited_end_date_time, "
                "notes, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "order_id, "
                "order_name, "
                "advertiser_id, "
                "agency_id, "
                "creator_id, "
                "salesperson_id, "
                "external_order_id, "
                "trafficker_id, "
                "po_number, "
                "currency_code, "
                "status, "
                "total_clicks_delivered, "
                "total_impressions_delivered, "
                "total_viewable_impressions_delivered, "
                "is_archived, "
                "is_programmatic, "
                "last_modifiedby_App, "
                "unlimited_end_date_time, "
                "notes, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))
    return cur


def load_line_item_creative(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where creative_id in (select creative_id from "
                "{0}.stg_{1} group by creative_id) and line_item_id in (select line_item_id from "
                "{0}.stg_{1} group by line_item_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "creative_id, "
                "line_item_id, "
                "creative_set_id, "
                "manualCreativeRotationWeight, "
                "sequentialCreativeRotationIndex, "
                "destinationUrl, "
                "creativeset_clicks_delivered, "
                "creativeset_impressions_delivered, "
                "creativeset_video_completions_delivered, "
                "creativeset_video_starts_delivered, "
                "creativeset_viewable_impressions_delivered, "
                "clicks_delivered, "
                "impressions_delivered, "
                "video_completions_delivered, "
                "video_starts_delivered, "
                "viewable_impressions_delivered, "
                "status, "
                "targeting_name, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "generic11,  "
                "insrt_ts)  select "
                "creative_id, "
                "line_item_id, "
                "creative_set_id, "
                "manualCreativeRotationWeight, "
                "sequentialCreativeRotationIndex, "
                "destinationUrl, "
                "creativeset_clicks_delivered, "
                "creativeset_impressions_delivered, "
                "creativeset_video_completions_delivered, "
                "creativeset_video_starts_delivered, "
                "creativeset_viewable_impressions_delivered, "
                "clicks_delivered, "
                "impressions_delivered, "
                "video_completions_delivered, "
                "video_starts_delivered, "
                "viewable_impressions_delivered, "
                "status, "
                "targeting_name, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "generic11,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))

    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))
    return cur


def load_creative_template(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where creative_template_id in (select creative_template_id from "
                "{0}.stg_{1} group by creative_template_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "creative_template_id, "
                "creative_template_description, "
                "creative_template_name, "
                "creative_template_type, "
                "is_interstitial, "
                "is_native_eligible, "
                "is_safeframe_compatible, "
                "status, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "creative_template_id, "
                "creative_template_description, "
                "creative_template_name, "
                "creative_template_type, "
                "is_interstitial, "
                "is_native_eligible, "
                "is_safeframe_compatible, "
                "status, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))


def load_custom_field(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name,key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where custom_id in (select custom_id from "
                "{0}.stg_{1} group by custom_id) and actv_flg = "
                "'Y';".format(schema_name,table_name))

    cur.execute("insert into {0}.{1}( "
                "custom_id, "
                "name, "
                "entity_type, "
                "is_active, "
                "data_type, "
                "description, "
                "visibility, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "custom_id, "
                "name, "
                "entity_type, "
                "is_active, "
                "data_type, "
                "description, "
                "visibility, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name,table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))


def load_custom_targetting(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where custom_targetting_id in (select custom_targetting_id from "
                "{0}.stg_{1} group by custom_targetting_id) and actv_flg = "
                "'Y';".format(schema_name,table_name))

    cur.execute("insert into {0}.{1}( "
                "custom_targetting_id, "
                "display_name, "
                "custom_targeting_KeyId, "
                "match_type, "
                "name, "
                "status, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "custom_targetting_id, "
                "display_name, "
                "custom_targeting_KeyId, "
                "match_type, "
                "name, "
                "status, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name,table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))


def load_exchange_rate(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name,table_name ,key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where exchange_id in (select exchange_id from "
                "{0}.stg_{1} group by exchange_id) and actv_flg = "
                "'Y';".format(schema_name,table_name))

    cur.execute("insert into {0}.{1}( "
                "exchange_id, "
                "direction, "
                "exchange_rate, "
                "currency_code, "
                "refresh_rate, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "exchange_id, "
                "direction, "
                "exchange_rate, "
                "currency_code, "
                "refresh_rate, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name,table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))


def load_label(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name,key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where label_id in (select label_id from "
                "{0}.stg_{1} group by label_id) and actv_flg = "
                "'Y';".format(schema_name,table_name))

    cur.execute("insert into {0}.{1}( "
                "label_id, "
                "description, "
                "is_active, "
                "name, "
                "type, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "label_id, "
                "description, "
                "is_active, "
                "name, "
                "type, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name,table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))


def load_user(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where user_id in (select user_id from "
                "{0}.stg_{1} group by user_id) and actv_flg = "
                "'Y';".format(schema_name,table_name))

    cur.execute("insert into {0}.{1}( "
                "user_id, "
                "username, "
                "role_id, "
                "role_name, "
                "external_id, "
                "is_active, "
                "is_emailnotification_allowed, "
                "is_service_account, "
                "orders_ui_localtimezone_id, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "user_id, "
                "username, "
                "role_id, "
                "role_name, "
                "external_id, "
                "is_active, "
                "is_emailnotification_allowed, "
                "is_service_account, "
                "orders_ui_localtimezone_id, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name,table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))


def load_proposal(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where proposal_id in (select proposal_id from "
                "{0}.stg_{1} group by proposal_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "proposal_id, "
                "proposal_name, "
                "po_number, "
                "actual_expiry_time, "
                "advertiser_discount, "
                "advertiser_company_id, "
                "advertiser_type, "
                "approval_status, "
                "billing_base, "
                "billing_cap, "
                "billing_schedule, "
                "billing_source, "
                "budget, "
                "currency_code, "
                "custom_thirdparty_adserver_name, "
                "dfp_order_id, "
                "exchange_rate, "
                "expected_expiry_time, "
                "has_buyer_rfp, "
                "has_offline_errors, "
                "internal_notes, "
                "is_archived, "
                "is_programmatic, "
                "is_sold, "
                "last_retraction_details, "
                "buyer_account_Id, "
                "has_local_version_edits, "
                "is_new_version_from_buyer, "
                "marketplace_comment, "
                "negotiation_status, "
                "pricing_model, "
                "primary_salesperson_split, "
                "primary_salesperson_user_id, "
                "primary_trafficker_id, "
                "probability_of_close, "
                "proposal_discount, "
                "refresh_exchange_rate, "
                "status, "
                "thirdparty_adserver_id, "
                "timezone_id, "
                "valueadded_tax, "
                "workflow_progress, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "proposal_id, "
                "proposal_name, "
                "po_number, "
                "actual_expiry_time, "
                "advertiser_discount, "
                "advertiser_company_id, "
                "advertiser_type, "
                "approval_status, "
                "billing_base, "
                "billing_cap, "
                "billing_schedule, "
                "billing_source, "
                "budget, "
                "currency_code, "
                "custom_thirdparty_adserver_name, "
                "dfp_order_id, "
                "exchange_rate, "
                "expected_expiry_time, "
                "has_buyer_rfp, "
                "has_offline_errors, "
                "internal_notes, "
                "is_archived, "
                "is_programmatic, "
                "is_sold, "
                "last_retraction_details, "
                "buyer_account_Id, "
                "has_local_version_edits, "
                "is_new_version_from_buyer, "
                "marketplace_comment, "
                "negotiation_status, "
                "pricing_model, "
                "primary_salesperson_split, "
                "primary_salesperson_user_id, "
                "primary_trafficker_id, "
                "probability_of_close, "
                "proposal_discount, "
                "refresh_exchange_rate, "
                "status, "
                "thirdparty_adserver_id, "
                "timezone_id, "
                "valueadded_tax, "
                "workflow_progress, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))
    return cur


def load_proposal_line_item_targetted_ad_unit(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where adunit_id in (select adunit_id from "
                "{0}.stg_{1} group by adunit_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "proposal_lineitem_id, "
                "proposal_id, "
                "dfp_lineitem_id, "
                "lineitem_type, "
                "adunit_id, "
                "include_descendants, "
                "targetting_type, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "proposal_lineitem_id, "
                "proposal_id, "
                "dfp_lineitem_id, "
                "lineitem_type, "
                "adunit_id, "
                "include_descendants, "
                "targetting_type, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid, "
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))


def load_line_item_targetted_ad_unit(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where adunit_id in (select adunit_id from "
                "{0}.stg_{1} group by adunit_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "order_id, "
                "line_item_id, "
                "line_item_name, "
                "order_name, "
                "line_item_type, "
                "adunit_id, "
                "include_descendants, "
                "targetting_type, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid,"
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "order_id, "
                "line_item_id, "
                "line_item_name, "
                "order_name, "
                "line_item_type, "
                "adunit_id, "
                "include_descendants, "
                "targetting_type, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid,"
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))


def load_line_item_custom_field(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where custom_field_id in (select custom_field_id from "
                "{0}.stg_{1} group by custom_field_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "order_id, "
                "line_item_id, "
                "line_item_name, "
                "order_name, "
                "line_item_type, "
                "custom_field_id, "
                "custom_field_value, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid,"
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "order_id, "
                "line_item_id, "
                "line_item_name, "
                "order_name, "
                "line_item_type, "
                "custom_field_id, "
                "custom_field_value, "
                "start_datetime_date_day, "
                "start_datetime_date_month, "
                "start_datetime_date_year, "
                "start_datetime_hour, "
                "start_datetime_minute, "
                "start_datetime_second, "
                "start_datetime_timezoneid, "
                "end_datetime_date_day, "
                "end_datetime_date_month, "
                "end_datetime_date_year, "
                "end_datetime_hour, "
                "end_datetime_minute, "
                "end_datetime_second, "
                "end_datetime_timezoneid, "
                "last_modified_datetime_date_day, "
                "last_modified_datetime_date_month, "
                "last_modified_datetime_date_year, "
                "last_modified_datetime_hour, "
                "last_modified_datetime_minute, "
                "last_modified_datetime_second, "
                "last_modified_datetime_timezoneid,"
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))

def load_line_item_targeting_location(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.stg_{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

    cur.execute("update {0}.{1} set actv_flg = 'N', record_to "
                "= sysdate where location_id in (select location_id from "
                "{0}.stg_{1} group by location_id) and actv_flg = "
                "'Y';".format(schema_name, table_name))

    cur.execute("insert into {0}.{1}( "
                "order_id ,"
                "line_item_id ,"
                "line_item_name ,"
                "order_name ,"
                "line_item_type ,"
                "location_id ,"
                "location_type ,"
                "canonical_parent_id ,"
                "location_name ,"
                "start_datetime_date_day ,"
                "start_datetime_date_month ,"
                "start_datetime_date_year ,"
                "start_datetime_hour ,"
                "start_datetime_minute ,"
                "start_datetime_second ,"
                "start_datetime_timezoneid ,"
                "end_datetime_date_day ,"
                "end_datetime_date_month ,"
                "end_datetime_date_year ,"
                "end_datetime_hour ,"
                "end_datetime_minute ,"
                "end_datetime_second ,"
                "end_datetime_timezoneid ,"
                "last_modified_datetime_date_day ,"
                "last_modified_datetime_date_month ,"
                "last_modified_datetime_date_year ,"
                "last_modified_datetime_hour ,"
                "last_modified_datetime_minute ,"
                "last_modified_datetime_second ,"
                "last_modified_datetime_timezoneid ,"
                "actv_flg,  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts)  select "
                "order_id ,"
                "line_item_id ,"
                "line_item_name ,"
                "order_name ,"
                "line_item_type ,"
                "location_id ,"
                "location_type ,"
                "canonical_parent_id ,"
                "location_name ,"
                "start_datetime_date_day ,"
                "start_datetime_date_month ,"
                "start_datetime_date_year ,"
                "start_datetime_hour ,"
                "start_datetime_minute ,"
                "start_datetime_second ,"
                "start_datetime_timezoneid ,"
                "end_datetime_date_day ,"
                "end_datetime_date_month ,"
                "end_datetime_date_year ,"
                "end_datetime_hour ,"
                "end_datetime_minute ,"
                "end_datetime_second ,"
                "end_datetime_timezoneid ,"
                "last_modified_datetime_date_day ,"
                "last_modified_datetime_date_month ,"
                "last_modified_datetime_date_year ,"
                "last_modified_datetime_hour ,"
                "last_modified_datetime_minute ,"
                "last_modified_datetime_second ,"
                "last_modified_datetime_timezoneid ,"
                "'Y',  "
                "generic1,  "
                "generic2,  "
                "generic3,  "
                "generic4,  "
                "generic5,  "
                "generic6,  "
                "generic7,  "
                "generic8,  "
                "generic9,  "
                "generic10,  "
                "insrt_ts from "
                "{0}.stg_{1};".format(schema_name, table_name))
    cur.execute('delete from {}.stg_{}'.format(schema_name, table_name))

def load_ad_unit_new(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

def load_creative_new(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))

def load_line_item_creative_ad_units(cur, table_name, key, iam_role, schema_name):
    cur.execute("copy {0}.{1} from "
                "'s3://{2}' credentials 'aws_iam_role={3}' delimiter '|"
                "' CSV QUOTE '\"' IGNOREHEADER 1 timeformat "
                "'YYYY-MM-DD HH:MI:SS';".format(
        schema_name, table_name, key, iam_role))


def main(*args):
    """
    Args 1: Output_Bucket
    Args 2: Table_name
    Args 3: Source_Name
    Args 4: Date
    Args 5: Network_ID
    Args 6: Input_Bucket
    Args 7: Pipeline_Time
    """
    try:

        if len(args) < 7:
            logger.error(args)
            raise Exception("Please pass all the arguments in order "
                            "1. Output_Bucket 2. Table_name 3. Source_Name"
                            "4. Date 5. Network_ID 6. Input_Bucket 7. Pipeline Time")

        logger.info(args)
        output_bucket = args[0]
        table_name = args[1]
        source_name = args[2]
        date = datetime.strptime(args[3], '%Y/%m/%d')
        network_id = args[4]
        input_bucket = args[5]
        pipeline_time = args[6]
        year = date.year
        month = date.month
        day = date.day
        monthh = '{:02}'.format(month)
        dayy = '{:02}'.format(day)
        schema_name = os.environ['AD_MANAGER_SCHEMA_NAME']
        role_arn = os.environ['ROLE_ARN']
        db_name = os.environ['DB_NAME']
        host_name = os.environ['HOST_NAME']
        port = os.environ['PORT']
        user_name = os.environ['USER_NAME']
        pwd = os.environ['DB_PWD']
        con = psycopg2.connect(dbname=db_name, host=host_name, port=port,
                               user=user_name, password=pwd)
        cur = con.cursor()
        schedule_type = os.environ.get('SCHEDULE_TYPE', 'scheduled')
        ad_manager_services = get_data_from_dynamodb(table_name, 'source',
                                                     source_name)
        for item in ad_manager_services['services']:
            alias = item['alias']
            table_name = item['table_name']
            input_key = "{}/ad-manager/{}/{}/{}/{}/year={}/month={}/day={}/{" \
                        "}.csv".format(input_bucket, alias, network_id,
                                        'transformation', 'csv',
                                        year,
                                        monthh, dayy, alias)
            logger.info("Working on {}".format(alias))
            if alias == 'ad_units':
                load_ad_unit(cur, table_name, input_key, role_arn,
                             schema_name)
                #Load data for ad unit report table
                logger.info("Working on Ad Units Report")
                table_name_adunit_new = item['report_job_table_name']
                input_key_adunit_new = "{}/ad-manager/ad_units_report/{}/{}/{}/year={}/month={}/day={}/{" \
                                          "}.csv".format(input_bucket, network_id,
                                                         'transformation', 'csv',
                                                         year,
                                                         monthh, dayy, 'ad_units_report')
                load_ad_unit_new(cur, table_name_adunit_new, input_key_adunit_new, role_arn,
                             schema_name)


            if alias == 'advertisers':
                load_advertiser(cur, table_name, input_key, role_arn,
                             schema_name)
            if alias == 'creative':
                load_creative(cur, table_name, input_key, role_arn,
                                schema_name)
                # Load data for creative report table
                logger.info("Working on Creative Report")
                table_name_creative_new = item['report_job_table_name']
                input_key_creative_new = "{}/ad-manager/creative_report/{}/{}/{}/year={}/month={}/day={}/{" \
                                       "}.csv".format(input_bucket, network_id,
                                                      'transformation', 'csv',
                                                      year,
                                                      monthh, dayy, 'creative_report')
                load_ad_unit_new(cur, table_name_creative_new, input_key_creative_new, role_arn,
                                 schema_name)

            if alias == 'creative_set':
                load_creative_set(cur, table_name, input_key, role_arn,
                                schema_name)
            if alias == 'line_item':
                load_line_item(cur, table_name, input_key, role_arn,
                                schema_name)

                #Load Data for line_item_targetted_ad_unit
                logger.info("Working on line_item_targetted_ad_unit")
                expand_table_name_adunit = item['expand_table_name_ad_unit']
                expand_input_key_adunit = "{}/ad-manager/line_item_targetted_ad_unit/{}/{}/{}/year={}/month={}/day={}/{" \
                                   "}.csv".format(input_bucket, network_id,
                                                  'transformation', 'csv',
                                                  year,
                                                  monthh, dayy, 'line_item_targetted_ad_unit')
                load_line_item_targetted_ad_unit(cur, expand_table_name_adunit, expand_input_key_adunit, role_arn,
                                                          schema_name)

                logger.info("Working on line_item_custom_fields")
                expand_table_name_adunit = item['expand_table_name_custom_field']
                expand_input_key_adunit = "{}/ad-manager/line_item_custom_field/{}/{}/{}/year={}/month={}/day={}/{" \
                                          "}.csv".format(input_bucket, network_id,
                                                         'transformation', 'csv',
                                                         year,
                                                         monthh, dayy, 'line_item_custom_field')
                load_line_item_custom_field(cur, expand_table_name_adunit, expand_input_key_adunit, role_arn,
                                                 schema_name)

                # Load Data for line_item_targetted_locations
                logger.info("Working on line_item_targetted_locations")
                expand_table_name_targeting_location = item['expand_table_name_targeting_location']
                expand_input_key_targeting_location = "{}/ad-manager/line_item_targeting_locations/{}/{}/{}/year={}/month={}/day={}/{" \
                                          "}.csv".format(input_bucket, network_id,
                                                         'transformation', 'csv',
                                                         year,
                                                         monthh, dayy, 'line_item_targeting_locations')
                load_line_item_targeting_location(cur, expand_table_name_targeting_location, expand_input_key_targeting_location, role_arn,
                                            schema_name)


            if alias == 'proposal_line_item':
                load_proposal_line_item(cur, table_name, input_key, role_arn,
                               schema_name)
                logger.info("Working on proposal_line_item_targetted_ad_unit")
                expand_table_name = item['expand_table_name']
                expand_input_key = "{}/ad-manager/proposal_line_item_targetted_ad_unit/{}/{}/{}/year={}/month={}/day={}/{" \
                                   "}.csv".format(input_bucket, network_id,
                                                  'transformation', 'csv',
                                                  year,
                                                  monthh, dayy, 'proposal_line_item_targetted_ad_unit')
                load_proposal_line_item_targetted_ad_unit(cur, expand_table_name, expand_input_key, role_arn,
                               schema_name)

            if alias == 'order':
                load_order(cur, table_name, input_key, role_arn,
                               schema_name)
            if alias == 'line_item_creative':
                load_line_item_creative(cur, table_name, input_key, role_arn,
                               schema_name)
                # Load data for creative report table
                logger.info("Working on line_item_creative_ad_units_report")
                table_name_line_item_creative_ad_units_report = item['report_job_table_name']
                input_key_line_item_creative_ad_units_report = "{}/ad-manager/line_item_creative_ad_units_report/{}/{}/{}/year={}/" \
                                                               "month={}/day={}/{}.csv".format(input_bucket, network_id,
                                                        'transformation', 'csv',
                                                        year,
                                                        monthh, dayy, 'line_item_creative_ad_units_report_report')
                load_ad_unit_new(cur, table_name_line_item_creative_ad_units_report,
                                 input_key_line_item_creative_ad_units_report, role_arn,
                                 schema_name)

            if alias == 'creative_template':
                load_creative_template(cur, table_name, input_key, role_arn,
                               schema_name)
            if alias == 'custom_field':
                load_custom_field(cur, table_name, input_key, role_arn,
                               schema_name)
            if alias == 'custom_targeting_service':
                load_custom_targetting(cur, table_name, input_key, role_arn,
                               schema_name)
            if alias == 'exchange_rate':
                load_exchange_rate(cur, table_name, input_key, role_arn,
                               schema_name)
            if alias == 'label':
                load_label(cur, table_name, input_key, role_arn,
                               schema_name)
            if alias == 'user':
                load_user(cur, table_name, input_key, role_arn,
                               schema_name)
            if alias == 'proposal':
                load_proposal(cur, table_name, input_key, role_arn,
                               schema_name)

        con.commit()
        con.close()
    except Exception as e:
        logger.exception(e)
        error_notify_v2(DATA_SOURCE, notification_type='PipelineFailure',
                        schedule_type=schedule_type,
                        _date=date,
                        notification_time=pipeline_time,
                        message=str(e))
    return
